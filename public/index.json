[
{
	"uri": "/tuto-asm-01/02/02structure/",
	"title": "02-structure",
	"tags": [],
	"description": "",
	"content": "Je vais présenter uniquement ce qui est utile pour débuter le programme assembleur.\nLe MSX c\u0026rsquo;est un processeur Z80 (le coeur). Il discute avec 3 organes principaux :\n Le VDP : Un processeur qui gère l\u0026rsquo;affichage écran (16ko de mémoire).\n Le PSG : Un processeur qui gère le son.\n Le PPI : Un processeur qui gère le clavier notamment.\n  Revenons au Z80, il dispose de 3 sortes de mémoires :\n La ROM.\n La RAM.\n Les registres internes.\n  Les mémoires sont des cases. Pour pouvoir les différencier, on leur a donné des numéros que l\u0026rsquo;on appelle Adresse (comme les numéros des maisons dans une rue).\n Ces adresses vont de 0 à 65535.\n Chaque adresse peut contenir un nombre entre 0 et 255.\n  ROM : Appelée mémoire morte. On peut simplement lire cette mémoire. On ne peut pas la modifier (données constructeur). Elle contient de petits programmes (routines) bien pratiques que l\u0026rsquo;on utilisera en assembleur pour lancer des actions ou faire des calculs.\nRAM : Appelée mémoire vive. Elle est modifiable et c\u0026rsquo;est celle que nous utiliserons pour programmer. Par contre elle s\u0026rsquo;efface dès que l\u0026rsquo;on éteint le MSX. C\u0026rsquo;est pour cela que l\u0026rsquo;on sauvegarde nos programmes.\nRegistres internes : Ce sont des sortes de mémoires. Ils n\u0026rsquo;ont pas d\u0026rsquo;adresse mais des lettres. En assembleur, c\u0026rsquo;est avec eux (une vingtaine environ) que l\u0026rsquo;on va jouer. On va rappeler des adresses, lire ou écrire dedans et faire des calculs. Et tout ça, c\u0026rsquo;est avec l\u0026rsquo;aide de ces registres que l\u0026rsquo;on va le faire.\nIl existe une page très simple et explicative du fonctionnement de ces registres du Z80 : Wiki Z80\nIl est important que l\u0026rsquo;on parle du VDP pour finir car c\u0026rsquo;est avec lui que l\u0026rsquo;on va discuter fréquemment pour afficher nos sprites et les faire bouger. Je passe volontairement sur les autres processeurs (PSG et PPI), on y reviendra au besoin.\nVDP Ce processeur permet d\u0026rsquo;afficher des images, des caractères ou des sprites à l\u0026rsquo;écran. Il contient 16ko de mémoire, appelée VRAM (dans laquelle on peut lire et écrire) et 9 registres internes (R0 à R7+ 1 registre d\u0026rsquo;état) qui ne sont pas les mêmes que ceux du Z80. La VRAM est divisée en 5 tables : 3 pour gérer l\u0026rsquo;affichage des caractères et 2 pour les sprites. Ces tables ne sont rien d\u0026rsquo;autre qu\u0026rsquo;un groupe d\u0026rsquo;adresses pouvant stocker des nombres.\nLes 3 tables des caractères:\n-TGP (Table Génératrice des Patrons): C\u0026rsquo;est là que l\u0026rsquo;on stocke les formes des caractères. Quand on tape la lettre A, le processeur Z80 demande au VDP de choisir la forme correspondant à la lettre A dans cette table.\n-TNP (Table des Noms des Patrons): C\u0026rsquo;est là que l\u0026rsquo;on va indiquer où afficher le caractère à l\u0026rsquo;écran.\n-TC (Table des Couleurs): C\u0026rsquo;est dans cette table que l\u0026rsquo;on va choisir la couleur du caractère et du fond de ce caractère.\nLe principe de fonctionnement de ces 3 tables est le suivant : on demande au processeur VDP d\u0026rsquo;afficher un (ou des) caractère(s) en définissant ce que l\u0026rsquo;on veut afficher, où on veut l\u0026rsquo;afficher et dans quelle couleur. Et comme on connait maintenant les tables de caractères, on pourra modifier la forme de ces derniers à volonté (par exemple pour dessiner un décor de jeu).\nLes 2 tables des sprites:\n-TGS (Table Génératrice des Sprites): Stocke les dessins des sprites que l\u0026rsquo;on va définir.\n-TAS (Table des Attributs des Sprites): stocke la position, le numéro et la couleur de chaque sprite.\nChacune de ces 5 tables débute par une adresse que l\u0026rsquo;on doit connaitre pour pouvoir y intégrer une liste d\u0026rsquo;informations, qui seront stockées à partir de là, vers les adresses suivantes en fonction du nombre d\u0026rsquo;informations (données) à stocker.\nPour définir automatiquement ces adresses de début en suivant les données constructeur, le VDP utilise 4 modes de fonctionnement :\n SCREEN 0 : Le mode texte\n SCREEN 1 : Le mode graphique 1\n SCREEN 2 : Le mode graphique 2\n SCREEN 3 : Le mode multicolore\n  Le programme assembleur que je veux expliquer utilise le SCREEN 1 donc je ne parlerai que de celui-là pour l\u0026rsquo;instant.\nLe SCREEN 1 sur MSX1 c\u0026rsquo;est 32 colonnes sur 24 lignes de texte et la possibilité d\u0026rsquo;utiliser les sprites.\n"
},
{
	"uri": "/",
	"title": "Accueil",
	"tags": [],
	"description": "",
	"content": " MSX-coding Code et Documentation de l\u0026rsquo;ordinateur MSX.\n"
},
{
	"uri": "/tuto-asm-01/01/01introduction/",
	"title": "01-introduction",
	"tags": [],
	"description": "",
	"content": " Outils nécessaires:  Tiasm (assembleur) blueMSX (émulateur) Context Editor (éditeur de texte)  Le but de ce blog est de présenter le plus simplement possible l\u0026rsquo;utilisation de l\u0026rsquo;assembleur sur MSX. Quitte à vulgariser, je tente de regrouper ici, ce que je n\u0026rsquo;ai pu trouver ailleurs sur le net afin de m\u0026rsquo;initier à l\u0026rsquo;assembleur.\nJe me suis procuré le livre suivant : MSX Programmes en langage machine de Steve WEBB. Ce livre contient notamment un programme réalisé en assembleur. C\u0026rsquo;est un shoot-em-up très basique mais qui permet de mettre en application les notions de base de l\u0026rsquo;assembleur.\nLes articles de ce site vont décrire, par étapes, les notions abordées et la manière dont je les ai comprises\n"
},
{
	"uri": "/tuto-asm-01/",
	"title": "Tuto ASM 01",
	"tags": [],
	"description": "",
	"content": " Tuto 1 ASM Pour débuter l\u0026rsquo;apprentissage de l\u0026rsquo;assembleur.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]