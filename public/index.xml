<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Accueil on MSX-coding</title>
    <link>/</link>
    <description>Recent content in Accueil on MSX-coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Wed, 23 Oct 2019 04:27:59 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>01-Introduction</title>
      <link>/tuto-asm-01/01/01introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tuto-asm-01/01/01introduction/</guid>
      <description>Outils nécessaires:  Tiasm (assembleur) blueMSX (émulateur) Context Editor (éditeur de texte)  Le but de ce blog est de présenter le plus simplement possible l&amp;rsquo;utilisation de l&amp;rsquo;assembleur sur MSX. Quitte à vulgariser, je tente de regrouper ici, ce que je n&amp;rsquo;ai pu trouver ailleurs sur le net afin de m&amp;rsquo;initier à l&amp;rsquo;assembleur.
Je me suis procuré le livre suivant : MSX Programmes en langage machine de Steve WEBB. Ce livre contient notamment un programme réalisé en assembleur.</description>
    </item>
    
    <item>
      <title>02-Structure du MSX</title>
      <link>/tuto-asm-01/02/02structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tuto-asm-01/02/02structure/</guid>
      <description>Je vais présenter uniquement ce qui est utile pour débuter le programme assembleur.
Le MSX c&amp;rsquo;est un processeur Z80 (le coeur). Il discute avec 3 organes principaux :
 Le VDP : Un processeur qui gère l&amp;rsquo;affichage écran (16ko de mémoire).
 Le PSG : Un processeur qui gère le son.
 Le PPI : Un processeur qui gère le clavier notamment.  Revenons au Z80, il dispose de 3 sortes de mémoires :</description>
    </item>
    
    <item>
      <title>03-Afficher un caractère</title>
      <link>/tuto-asm-01/03/03affchr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tuto-asm-01/03/03affchr/</guid>
      <description>(La théorie) Un caractère affiché par le VDP c&amp;rsquo;est 3 tables auxquelles on devra donner des instructions:
 TNP (position à l&amp;rsquo;écran)
 TGP (la forme du caractère)
 TC (la couleur du caractère et du fond de celui-ci)
  TNP  En mode SCREEN 1, on a vu que la TNP débute à l&amp;rsquo;adresse 6144.
 On sait aussi qu&amp;rsquo;en SCREEN 1 on a 32 colonnes pour 24 lignes (pour le texte).</description>
    </item>
    
    <item>
      <title>04-Mise en place</title>
      <link>/tuto-asm-01/04/04-mise-en-place/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tuto-asm-01/04/04-mise-en-place/</guid>
      <description>des outils de développement On va avoir besoin d&amp;rsquo;installer 3 programmes :
 Un émulateur (simule un MSX)
 Un éditeur de texte (pour taper du code texte assembleur)
 un assembleur (compile le code texte en code machine utilisable par un MSX)  Pour cela j&amp;rsquo;ai suivi les explications du site d&amp;rsquo;un développeur anglais dont je vous donne l&amp;rsquo;adresse de sa chaine Youtube :
Lets Make a Retro Game</description>
    </item>
    
    <item>
      <title>05-Découverte du code</title>
      <link>/tuto-asm-01/05/05-decouverte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tuto-asm-01/05/05-decouverte/</guid>
      <description>Fichiers sources et découverte du code assembleur MSX Pour faire fonctionner l&amp;rsquo;environnement que l&amp;rsquo;on a mis en place, on a besoin d&amp;rsquo;un document où taper notre code.
Il se présente sous la forme d&amp;rsquo;un petit fichier texte comme on peu en utiliser avec le blocnote de Windows. Sauf que le notre aura une extension de fichier qui se termine par .asm au lieu du traditionnel .txt
C&amp;rsquo;est lui que l&amp;rsquo;on va ouvrir avec l&amp;rsquo;éditeur de texte CONTEXT, c&amp;rsquo;est lui qui va recevoir le code que l&amp;rsquo;on va taper et c&amp;rsquo;est encore lui que l&amp;rsquo;on va compiler via la touche de fonction F9.</description>
    </item>
    
    <item>
      <title>06-La pratique</title>
      <link>/tuto-asm-01/06/06-afficher_chr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tuto-asm-01/06/06-afficher_chr/</guid>
      <description>La pratique : Afficher un caractère On va maintenant taper notre 1er code qui permettra :
  Activer le mode SCREEN 1. Afficher le caractère A à la position 5 de l&amp;rsquo;écran. Changer la couleur du caractère et du fond du caractère. Faire une boucle infinie pour que le résultat de cet affichage reste à l&amp;rsquo;écran.   Voici ce que cela donne pour l&amp;rsquo;ensemble du code, mais on va le reprendre bout par bout :</description>
    </item>
    
    <item>
      <title>07-un shoot-em-up</title>
      <link>/tuto-asm-01/07/07-shoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tuto-asm-01/07/07-shoot/</guid>
      <description>Organigramme Maintenant que l&amp;rsquo;on a vu comment utiliser les tables relatives aux caractères, on va mettre en pratique la 2eme partie des tables du VDP : L&amp;rsquo;affichage des sprites.
Avant de commencer, je vais vous parler du programme de shoot-em-up basique qui fait l&amp;rsquo;objet de ce blog.
Car on va commencer à écrire ce programme. En effet, il a l&amp;rsquo;avantage d&amp;rsquo;être très simple et d&amp;rsquo;aborder les grands principes d&amp;rsquo;un jeu, c&amp;rsquo;est avec lui que l&amp;rsquo;on abordera la mise en pratique de l&amp;rsquo;affichage des sprites dans un premier temps.</description>
    </item>
    
    <item>
      <title>08-Afficher un sprite</title>
      <link>/tuto-asm-01/08/08-sprite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tuto-asm-01/08/08-sprite/</guid>
      <description>La pratique On va maintenant taper notre 1er code du shoot-em-up.
On va enlever la partie du code correspondant à l&amp;rsquo;affichage du caractère (qui était notre exemple précédent), et donc repartir du fichier sources vierge exemple.asm.
 Quelques informations sur le début du code :
  Le programme est en SCREEN 1 3 SPRITES vont être créés (la fusée du joueur, l&amp;rsquo;ennemi/envahisseur, le tir)
 On charge les formes des SPRITES dans la table TGS</description>
    </item>
    
    <item>
      <title>09-Déplacement du joueur</title>
      <link>/tuto-asm-01/09/09-deplacement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tuto-asm-01/09/09-deplacement/</guid>
      <description>Maintenant que les SPRITES sont affichés, on va commencer à faire bouger la fusée du joueur.
Pour cela on va un peu modifier la structure du code assembleur. Il y surement d&amp;rsquo;autres méthodes, mais c&amp;rsquo;est celle présentée par le livre, donc je l&amp;rsquo;ai suivi.
Jusqu&amp;rsquo;à présent la ROM démarre et appelle tout de suite le sous-programme INIT. Pourquoi ? Ben, parce qu&amp;rsquo;on l&amp;rsquo;a spécifié dans l&amp;rsquo;entête du code, souvenez vous le DW INIT :</description>
    </item>
    
  </channel>
</rss>